create database xp_flink_dev;

create table dynamic_cep(
                            id varchar(40),
                            version int(8),
                            pattern text,
                            `function` text
);



INSERT INTO dynamic_cep
(id, version, pattern, `function`)
VALUES('1', 1, '{"name": "end","quantifier": {  "consumingStrategy": "SKIP_TILL_NEXT",  "properties": [    "SINGLE"  ],  "times": null,  "untilCondition": null},"condition": null,"nodes": [  {    "name": "end",    "quantifier": {      "consumingStrategy": "SKIP_TILL_NEXT",      "properties": [        "SINGLE"      ],      "times": null,      "untilCondition": null    },    "condition": {      "className": "demo.condition.EndCondition",      "type": "CLASS"    },    "type": "ATOMIC"  },  {    "name": "middle",    "quantifier": {      "consumingStrategy": "SKIP_TILL_NEXT",      "properties": [        "LOOPING"      ],      "times": {        "from": 3,        "to": 3,        "windowTime": null      },      "untilCondition": null    },    "condition": {      "className": "demo.condition.MiddleCondition",      "type": "CLASS"    },    "type": "ATOMIC"  },  {    "name": "start",    "quantifier": {      "consumingStrategy": "SKIP_TILL_NEXT",      "properties": [        "SINGLE",        "OPTIONAL"      ],      "times": null,      "untilCondition": null    },    "condition": {      "className": "demo.condition.StartCondition",      "type": "CLASS"    },    "type": "ATOMIC"  }],"edges": [  {    "source": "middle",    "target": "end",    "type": "NOT_FOLLOW"  },  {    "source": "start",    "target": "middle",    "type": "SKIP_TILL_NEXT"  }],"window": {  "type": "FIRST_AND_LAST",  "time": {    "unit": "MINUTES",    "size": 10  }},"afterMatchStrategy": {  "type": "NO_SKIP",  "patternName": null},"type": "COMPOSITE","version": 1}', 'demo.dynamic.DemoPatternProcessFunction');


-- 测试动态案例
-- INSERT INTO dynamic_cep(`id`,`version`,`pattern`,`function`) values('1',1,'{"name":"end","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["SINGLE"],"times":null,"untilCondition":null},"condition":null,"nodes":[{"name":"end","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["SINGLE"],"times":null,"untilCondition":null},"condition":{"className":"demo.condition.EndCondition","type":"CLASS"},"type":"ATOMIC"},{"name":"start","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["LOOPING"],"times":{"from":3,"to":3,"windowTime":null},"untilCondition":null},"condition":{"expression":"action == 0","type":"AVIATOR"},"type":"ATOMIC"}],"edges":[{"source":"start","target":"end","type":"SKIP_TILL_NEXT"}],"window":null,"afterMatchStrategy":{"type":"SKIP_PAST_LAST_EVENT","patternName":null},"type":"COMPOSITE","version":1}','demo.dynamic.DemoPatternProcessFunction');
--
-- INSERT INTO dynamic_cep(`id`, `version`, `pattern`, `function`) values('1', 2, '{"name":"end","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["SINGLE"],"times":null,"untilCondition":null},"condition":null,"nodes":[{"name":"end","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["SINGLE"],"times":null,"untilCondition":null},"condition":{"className":"demo.condition.EndCondition","type":"CLASS"},"type":"ATOMIC"},{"name":"start","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["LOOPING"],"times":{"from":5,"to":5,"windowTime":null},"untilCondition":null},"condition":{"expression":"action == 0 || action == 2","type":"AVIATOR"},"type":"ATOMIC"}],"edges":[{"source":"start","target":"end","type":"SKIP_TILL_NEXT"}],"window":null,"afterMatchStrategy":{"type":"SKIP_PAST_LAST_EVENT","patternName":null},"type":"COMPOSITE","version":1}','demo.dynamic.DemoPatternProcessFunction');
--
-- INSERT INTO dynamic_cep(`id`, `version`, `pattern`, `function`) values('2', 1, '{"name":"end","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["SINGLE"],"times":null,"untilCondition":null},"condition":null,"nodes":[{"name":"end","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["SINGLE"],"times":null,"untilCondition":null},"condition":{"className":"demo.condition.EndCondition","type":"CLASS"},"type":"ATOMIC"},{"name":"start","quantifier":{"consumingStrategy":"SKIP_TILL_NEXT","properties":["LOOPING"],"times":{"from":3,"to":3,"windowTime":null},"untilCondition":null},"condition":{"expression":"action == 0","type":"AVIATOR"},"type":"ATOMIC"}],"edges":[{"source":"start","target":"end","type":"SKIP_TILL_NEXT"}],"window":null,"afterMatchStrategy":{"type":"SKIP_PAST_LAST_EVENT","patternName":null},"type":"COMPOSITE","version":1}','demo.dynamic.DemoPatternProcessFunction');

